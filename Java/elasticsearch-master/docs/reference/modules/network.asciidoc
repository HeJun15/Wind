[[modules-network]]
== Network Settings

There are several modules within a Node that use network based
configuration, for example, the
<<modules-transport,transport>> and
<<modules-http,http>> modules. Node level
network settings allows to set common settings that will be shared among
all network based modules (unless explicitly overridden in each module).

Be careful with host configuration! Never expose an unprotected instance
to the public internet.

The `network.bind_host` setting allows to control the host different network
components will bind on. By default, the bind host will be `_local_`
(loopback addresses such as `127.0.0.1`, `::1`).

The `network.publish_host` setting allows to control the host the node will
publish itself within the cluster so other nodes will be able to connect to it.
Currently an elasticsearch node may be bound to multiple addresses, but only
publishes one.  If not specified, this defaults to the "best" address from 
`network.bind_host`, sorted by IPv4/IPv6 stack preference, then by reachability.

The `network.host` setting is a simple setting to automatically set both
`network.bind_host` and `network.publish_host` to the same host value.

Both settings allows to be configured with either explicit host address(es)
or host name(s). The settings also accept logical setting value(s) explained
in the following table:

[cols="<,<",options="header",]
|=======================================================================
|Logical Host Setting Value |Description
|`_local_` |Will be resolved to loopback addresses

|`_local:ipv4_` |Will be resolved to loopback IPv4 addresses (e.g. 127.0.0.1)

|`_local:ipv6_` |Will be resolved to loopback IPv6 addresses (e.g. ::1)

|`_site_` |Will be resolved to site-local addresses ("private network")

|`_site:ipv4_` |Will be resolved to site-local IPv4 addresses (e.g. 192.168.0.1)

|`_site:ipv6_` |Will be resolved to site-local IPv6 addresses (e.g. fec0::1)

|`_global_` |Will be resolved to globally-scoped addresses ("publicly reachable")

|`_global:ipv4_` |Will be resolved to globally-scoped IPv4 addresses (e.g. 8.8.8.8)

|`_global:ipv6_` |Will be resolved to globally-scoped IPv6 addresses (e.g. 2001:4860:4860::8888)

|`_[networkInterface]_` |Resolves to the addresses of the provided
network interface. For example `_en0_`.

|`_[networkInterface]:ipv4_` |Resolves to the ipv4 addresses of the
provided network interface. For example `_en0:ipv4_`.

|`_[networkInterface]:ipv6_` |Resolves to the ipv6 addresses of the
provided network interface. For example `_en0:ipv6_`.
|=======================================================================

When the `discovery-ec2` plugin is installed, you can use
{plugins}/discovery-ec2-discovery.html#discovery-ec2-network-host[ec2 specific host settings].

When the `discovery-gce` plugin is installed, you can use
{plugins}/discovery-gce-network-host.html[gce specific host settings].


[float]
[[tcp-settings]]
=== TCP Settings

Any component that uses TCP (like the HTTP, Transport and Memcached)
share the following allowed settings:

[cols="<,<",options="header",]
|=======================================================================
|Setting |Description
|`network.tcp.no_delay` |Enable or disable tcp no delay setting.
Defaults to `true`.

|`network.tcp.keep_alive` |Enable or disable tcp keep alive. Defaults
to `true`.

|`network.tcp.reuse_address` |Should an address be reused or not.
Defaults to `true` on non-windows machines.

|`network.tcp.send_buffer_size` |The size of the tcp send buffer size
(in size setting format). By default not explicitly set.

|`network.tcp.receive_buffer_size` |The size of the tcp receive buffer
size (in size setting format). By default not explicitly set.
|=======================================================================

