[[search-aggregations-metrics-min-aggregation]]
=== Min Aggregation

A `single-value` metrics aggregation that keeps track and returns the minimum value among numeric values extracted from the aggregated documents. These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.

Computing the min price value across all documents:

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "min_price" : { "min" : { "field" : "price" } }
    }
}
--------------------------------------------------

Response:

[source,js]
--------------------------------------------------
{
    ...

    "aggregations": {
        "min_price": {
            "value": 10
        }
    }
}
--------------------------------------------------

As can be seen, the name of the aggregation (`min_price` above) also serves as the key by which the aggregation result can be retrieved from the returned response.

==== Script

Computing the min price value across all document, this time using a script:

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "min_price" : { "min" : { "script" : "doc['price'].value" } }
    }
}
--------------------------------------------------

This will interpret the `script` parameter as an `inline` script with the default script language and no script parameters. To use a file script use the following syntax:

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "min_price" : { 
            "min" : { 
                "script" : {
                    "file": "my_script",
                    "params": {
                        "field": "price"
                    }
                }
            }
        }
    }
}
--------------------------------------------------

TIP: for indexed scripts replace the `file` parameter with an `id` parameter.

==== Value Script

Let's say that the prices of the documents in our index are in USD, but we would like to compute the min in EURO (and for the sake of this example, lets say the conversion rate is 1.2). We can use a value script to apply the conversion rate to every value before it is aggregated:

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "min_price_in_euros" : {
            "min" : {
                "field" : "price",
                "script" : 
                    "inline": "_value * conversion_rate",
                    "params" : {
                        "conversion_rate" : 1.2
                    }
                }
            }
        }
    }
}
--------------------------------------------------

==== Missing value

The `missing` parameter defines how documents that are missing a value should be treated.
By default they will be ignored but it is also possible to treat them as if they
had a value.

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "grade_min" : {
            "min" : {
                "field" : "grade",
                "missing": 10 <1>
            }
        }
    }
}
--------------------------------------------------

<1> Documents without a value in the `grade` field will fall into the same bucket as documents that have the value `10`. 
